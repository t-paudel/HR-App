/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.11).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import java.util.List;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.model.ApplyCompOff;
import io.swagger.model.ApplyLeave;
import io.swagger.model.History;
import io.swagger.model.MessageStatus;
import io.swagger.model.UserLeaves;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-09-06T06:17:29.965Z[GMT]")
@Api(value = "leaveManagement", description = "the leaveManagement API")
public interface LeaveManagementApi {

    @ApiOperation(value = "Add new users leave data", nickname = "addLeaves", notes = "", tags={ "leaves", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid employee ID"),
        @ApiResponse(code = 404, message = "Employee not found"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/leaveManagement/api/addLeaves",
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    ResponseEntity<UserLeaves> addLeaves(@ApiParam(value = "Leave Object that needs to be added" ,required=true )  @Valid @RequestBody UserLeaves body);

	
	@ApiOperation(value = "Finds leave data by employeeId", nickname = "getLeavesByEmployeeId", notes = "", response = UserLeaves.class, responseContainer = "List", tags={ "leaves", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = UserLeaves.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid employee ID"),
        @ApiResponse(code = 404, message = "Employee not found") })
    @RequestMapping(value = "/leaveManagement/api/getLeaves/{employeeId}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<UserLeaves> getLeavesByEmployeeId(@ApiParam(value = "EmployeeId to filter by",required=true) @PathVariable("employeeId") String employeeId);

	
    @ApiOperation(value = "Deletes employee leave data", nickname = "deleteleaves", notes = "", tags={ "leaves", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Invalid employee ID"),
        @ApiResponse(code = 404, message = "Employee not found") })
    @RequestMapping(value = "/leaveManagement/api/removeLeaves/{employeeId}",
        method = RequestMethod.DELETE)
    ResponseEntity<MessageStatus> deleteleaves(@ApiParam(value = "Employee id to delete",required=true) @PathVariable("employeeId") String employeeId);
	

    @ApiOperation(value = "Update user leave data", nickname = "applyLeaves", notes = "", tags={ "leaves", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid employee ID"),
        @ApiResponse(code = 404, message = "Employee not found"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/leaveManagement/api/applyLeave",
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    ResponseEntity<MessageStatus> applyLeaves(@ApiParam(value = "ApplyLeave Object that needs to be added" ,required=true )  @Valid @RequestBody ApplyLeave body);

	
	@ApiOperation(value = "Apply for comp off", nickname = "applyCompOff", notes = "", tags={ "leaves", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid employee ID"),
        @ApiResponse(code = 404, message = "Employee not found"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/leaveManagement/api/applyCompOff",
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    ResponseEntity<MessageStatus> applyCompOff(@ApiParam(value = "ApplyLeave Object that needs to be added" ,required=true )  @Valid @RequestBody ApplyCompOff body);




	@ApiOperation(value = "Deletes employee leave data", nickname = "deleteEmployeeLeaveHistory", notes = "", tags={ "history", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid employee ID"),
        @ApiResponse(code = 404, message = "Employee not found"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/leaveManagement/api/removeHistory/{employeeId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteEmployeeLeaveHistory(@ApiParam(value = "Employee id to delete",required=true) @PathVariable("employeeId") String employeeId);


  

    @ApiOperation(value = "Fetches all the leaves applied by the employees", nickname = "getEmployeeLeaveHistory", notes = "", response = UserLeaves.class, responseContainer = "List", tags={ "history", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = UserLeaves.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid employee ID"),
        @ApiResponse(code = 404, message = "Employee not found") })
    @RequestMapping(value = "/leaveManagement/api/getHistory/{employeeId}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<UserLeaves>> getEmployeeLeaveHistory(@ApiParam(value = "Employee id to delete",required=true) @PathVariable("employeeId") String employeeId);


    

    @ApiOperation(value = "Update already applied leave/comp-off", nickname = "updateLeaveHistory", notes = "", tags={ "history", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid employee ID"),
        @ApiResponse(code = 404, message = "Employee not found"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/leaveManagement/api/addHistory",
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateLeaveHistory(@ApiParam(value = "History Object that needs to be added" ,required=true )  @Valid @RequestBody List<History> body);

}
